<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:local="."
			   creationComplete="init()"  >
	<fx:Script>
		<![CDATA[
			
			
			//title="Matrix editor"
			//close="promptExit()"
			import flash.ui.Keyboard;
			
			import lse.math.games.builder.model.Outcome;
			import lse.math.games.builder.model.Player;
			import lse.math.games.builder.model.Rational;
			import lse.math.games.builder.model.StrategicForm;
			import lse.math.games.builder.model.Strategy;
			import lse.math.games.builder.presenter.Presenter;
			import lse.math.games.builder.viewmodel.AutoLabeller;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import util.Log;
			import util.PromptThreeButtons;
			import util.PromptTwoButtons;
			
			
			private var _matrix:StrategicForm;
			private var _strMap:Dictionary;
			private var _payMap:Dictionary;
			private var _controller:Presenter;
			
			import lse.math.games.builder.settings.UserSettings;
			import lse.math.games.builder.settings.SCodes;
			
			private var log:Log = Log.instance;
			
			private var payoffMatrix1:Array;
			private var payoffMatrix2:Array;
			
			private var maxColumns:int;
			
			[Bindable]
			public var alpha1:String; //String with the strategies of pl1
			[Bindable]
			public var pl1NumStr:int;
			[Bindable]
			private var pl1PayMapStr:String;
			
			[Bindable]
			private var alpha2:String; //String with the strategies of pl2
			[Bindable]
			private var pl2NumStr:int;
			[Bindable]
			private var pl2PayMapStr:String; 
			
			[Bindable]
			private var p1_strat_editable:Boolean=false;
			[Bindable]
			private var p1_numb_editable:Boolean=false;
			[Bindable]
			private var p1_payoffs_editable:Boolean=false;
				
			
			[Bindable]
			private var p2_strat_editable:Boolean=false;
			[Bindable]
			private var p2_numb_editable:Boolean=false;
			[Bindable]
			private var p2_payoffs_editable:Boolean=false;

			[Bindable]
			private var p2_text_cbg:uint=0xffffff;
			[Bindable]
			private var p2_strat_cbg:uint=0xffffff;
			[Bindable]
			private var p2_num_cbg:uint=0xffffff;	
			
			[Bindable]
			private var p1cbg:uint=0xffffff;
			
			
			
			private var glbSettings:UserSettings = UserSettings.instance;
			private var dataChanged:Boolean = false;
			//private var instyle:String="ZG";
			
			private var zerosum_mode:Boolean = false;
			private var general_mode:Boolean = true;
			private var symmetric_mode:Boolean = false;
			
			/** Matrix which is being edited */
			public function set matrix(value:StrategicForm):void { 
				_matrix = value;
				
				_strMap = new Dictionary();
				_payMap = _matrix.payMatrixMap;
				
				for(var i:int = 0, pl:Player = _matrix.firstPlayer; i<_matrix.numPlayers; i++, pl=pl.nextPlayer)
					_strMap[pl] = _matrix.strategies(pl);
				
				populate(0);
				populate(1);

				if (pl1NumStr == 1 && pl2NumStr == 1) { // 1x1 game from extensive form
					setDefaultStrategicForm();
					alignStrategy()
				}

				//var str = [pl1NumStr.toString(),pl2NumStr.toString()].join(" ")
				//mx.controls.Alert.show(str); 

				alignStrategy();
			}
			
			public function init():void {
				this.mouseEnabled=true;
   				//this.skin.mouseEnabled=true;
								
				//pl1PayMapStrBox.addEventListener(KeyboardEvent.KEY_DOWN,keyPressedP1Payoff);
				//pl2PayMapStrBox.addEventListener(KeyboardEvent.KEY_DOWN,keyPressedP2Payoff);
				
				setEditableMode();
			}
			
			
			/** Presenter to which changes should be invalidated */
			public function set controller(value:Presenter):void {
				_controller = value;
				
			}

			public function setDefaultStrategicForm():void {
				pl1NumStr = 2;
				pl2NumStr = 2;
				pl1PayMapStr = "1 2 \n0 4";
				pl2PayMapStr = "3 0 \n0 1";
			}

			public function setMode(isZero:Boolean):void {
				if (!isZero) {
					zerosum_mode=false;
					general_mode=true;
					symmetric_mode=false;
					setEditableMode();
				}
			}
			
			
			public function setEditable(isEditable:Boolean):void{
				
				if (isEditable) {
					setEditableMode()
					
				} else {
					//Turn off everything
					p2_strat_editable=false;
					p2_numb_editable=false;
					p2_payoffs_editable=false;
					
					p1_strat_editable=false;
					p1_numb_editable=false;
					p1_payoffs_editable=false;
					
					p2_text_cbg=0xcccccc;
					p2_strat_cbg=0xcccccc;
					p2_num_cbg=0xcccccc;	
					
					p1cbg=0xcccccc;
				}
				
			}
			
			//Populates the matrix payoffs and strategies of player number 'plIdx' (starting in 0)
			//onto the graphical components
			private function populate(plIdx:int):void {
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var pl:Player = _matrix.firstPlayer;
				for(var i:int = 0; i<plIdx; i++)
					pl = pl.nextPlayer;
				
				var strVec:Vector.<Strategy> = _strMap[pl];
				
				if(plIdx == 0)
				{
					alpha1 = strVec.join(delimeter);
					pl1NumStr = strVec.length;
					pl1PayMapStr = payoffMatrixString(pl);
				} else if(plIdx == 1)
				{
					alpha2 = strVec.join(delimeter);
					pl2NumStr = strVec.length;		
					pl2PayMapStr = payoffMatrixString(pl);
				}
			}
			
			//Update the alphabets from the text boxes and autolabelling the rest
			private function updateAlphabets():void {
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var inUse1:Vector.<String> = new Vector.<String>();
				var inUse2:Vector.<String> = new Vector.<String>();
				
				var strVec1:Vector.<String> = new Vector.<String>();
				var strVec2:Vector.<String> = new Vector.<String>();
				
				for each(var st:String in pl1StratInput.text.split(delimeter)) {
					if(st != null && st.length>0) {
						inUse1.push(st.toString().toLowerCase());
						strVec1.push(st);
					}
				}
				for each(st in pl2StratInput.text.split(delimeter)) {
					if(st != null && st.length>0) {
						inUse2.push(st.toString().toLowerCase());
						strVec2.push(st);
					}
				}
				
				var al:AutoLabeller = new AutoLabeller();
				al.uniqueLabelNum = (pl1NumStr+pl2NumStr-strVec1.length-strVec2.length) > 0 ? 
					pl1NumStr+pl2NumStr-strVec1.length-strVec2.length : 0;
				
				alpha1 = "";
				for(var i:int = 0; i<pl1NumStr; i++)
				{
					var stratName:String;
					if(i<strVec1.length) 
						stratName = strVec1[i].toString()
					else {
						while(true){
							stratName = al.getNextAutoLabel_Player1(_matrix);
							if(inUse1.indexOf(stratName.toLowerCase())<0)
								break;
						}
					}
					alpha1+= (stratName+delimeter);
				}
				
				alpha2 = "";
				for(i = 0; i<pl2NumStr; i++)
				{
					if(i<strVec2.length) 
						stratName = strVec2[i].toString()
					else {
						while(true){
							stratName = al.getNextAutoLabel_Player2(_matrix);
							if(inUse2.indexOf(stratName.toLowerCase())<0)
								break;
						}
					}
					alpha2+= (stratName+delimeter);
				}
				
			}
			
			//Returns a string with the payoff matrix of a player
			
			private function payoffMatrixString(player:Player):String
			{
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var pl1StrVec:Vector.<Strategy> = _strMap[_matrix.firstPlayer];
				var pl2StrVec:Vector.<Strategy> = _strMap[_matrix.firstPlayer.nextPlayer];
				
				var lines:Vector.<String> = new Vector.<String>();
				for each(var st1:Strategy in pl1StrVec)
				{
					var columns:Vector.<String> = new Vector.<String>();
					
					for each(var st2:Strategy in pl2StrVec)
					columns.push(_payMap[player][Strategy.key([st1,st2])]);
					
					lines.push(columns.join(delimeter));
				}
				return lines.join("\n");
			}
			
			
			
			/* <--- --- CLOSE HANDLERS --- ---> */	
			// Prompt if the user wants to exit saving changes
			private function promptExit():void {
				if (dataChanged) {
					PromptThreeButtons.show(resultFromExitPrompt, "Would you like to save the changes before closing?");
				}	else {
					exit();
				}
			}
			
			private function resultFromExitPrompt():void {
				if(PromptThreeButtons.buttonPressed == PromptThreeButtons.OK)
					saveChanges();
				else if(PromptThreeButtons.buttonPressed == PromptThreeButtons.DISCARD)
					exit();
			}
			
			// Save the changes into the new matrix
			public function saveChanges():void 
			{
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				alignStrategy();
				updateAlphabets();
				
				
				var firstPl:Player = _matrix.firstPlayer;
				_matrix.clearMatrix();
				_matrix.firstPlayer = firstPl;
				
				var rows:Vector.<Strategy> = new Vector.<Strategy>();
				var cols:Vector.<Strategy> = new Vector.<Strategy>();
				
				for each(var st:String in alpha1.split(delimeter))
				{
					if(st != null && st.length>0) {
						var strat:Strategy = new Strategy(firstPl);
						strat.name = st;
						rows.push(strat);
						_matrix.addStrategy(strat);
					}
				}
				
				for each(st in alpha2.split(delimeter))
				{
					if(st != null && st.length>0) {
						strat = new Strategy(firstPl.nextPlayer);
						strat.name = st;
						cols.push(strat);
						_matrix.addStrategy(strat);
					}
				}
				
				var lines1:Array = pl1PayMapStr.split("\n");
				var lines2:Array = pl2PayMapStr.split("\n");
				
				for each(strat in rows)
				{
					var columns1:Array = new Array();
					var line:String = lines1.shift() as String;
					if(line != null)
						columns1 = line.split(delimeter);
					
					var columns2:Array = new Array();
					line = lines2.shift() as String;
					if(line != null)
						columns2 = line.split(delimeter);
					
					for each(var strat2:Strategy in cols)
					{
						var payStr1:String;
						var payStr2:String;
						var outcome:Outcome = new Outcome();
						
						while(true) {
							payStr1 = trim(columns1.shift() as String);
							if(payStr1 != null && Rational.parse(payStr1) != Rational.NaN){
								outcome.setPay(firstPl, Rational.parse(payStr1));
								break;
							} else if(columns1.length==0){
								outcome.setPay(firstPl, Rational.NaN);
								break;
							}
						}
						
						while(true) {
							payStr2 = trim(columns2.shift() as String);
							if(payStr2 != null && Rational.parse(payStr2) != Rational.NaN){
								outcome.setPay(firstPl.nextPlayer, Rational.parse(payStr2));
								break;
							} else if(columns2.length==0) {
								outcome.setPay(firstPl.nextPlayer, Rational.NaN);
								break;
							}
						}
						_matrix.addPayoff([strat, strat2], outcome, Rational.ONE);
					}
				}
				
				/*Ü
				//invalidate display
				if(_controller != null)
					_controller.invalidate(false, true, true); 
				else
					log.add(Log.ERROR_HIDDEN, "No controller defined ", "Settings");
				
				exit();
				*/
			}
			
			//Close the window
			private function exit():void
			{
				//PopUpManager.removePopUp(this);
			}
			
			private function trim( s:String ):String
			{
				if (s!=null){
					if (Rational.parse(s) == Rational.NaN)
						return s;
					else
						return s.replace( /^([\s|\t|\n]+)?(.*)([\s|\t|\n]+)?$/gm, "$2" );
				} else{
					return s;
				}
			}

			/** USES pl1NumStr and pl2NumStr
			**/
			private function createEmptyMatrix():Array {

				var pm:Array=new Array(); 

   				for(var i:int = 0; i < pl1NumStr; i++){
					pm[i] = [];    
					for(var j:int = 0; j < pl2NumStr; j++){ 
						pm[i][j] = "0";    
					}    
				}
				return pm;	
			}

			/**
			 * ASSUME SIZE UPFRONT
			 * Converts a string delimited by returns (rows) and a column delimiter into an array (pm)
			 *@param inputString:String payoffs in string representation
			 *@param pm:Array - source array 
			 *@author Martin  
			 */	
			private function convertToMatrixFixed(inputString:String):Array {

				var pm:Array = createEmptyMatrix();
				var temp:Array = convertToMatrix(inputString);
						
				for (var i:int=0;i<pl1NumStr;i++) {
					for (var j:int=0;j<pl2NumStr;j++) {
						if (temp.length>0) {
							if (i<temp.length) {
								if (temp[i].length>0) {
									if (j<temp[i].length) {
										pm[i][j]=temp[i][j];
									}
								}
							}
						}
					}
				}
				return pm;
			}

			/**
			 * THIS VERSION DOES NOT ASSUME A FIXED SIZE UPFRONT
			 * Converts a string delimited by returns (rows) and a column delimiter into an array (pm)
			 *@param inputString:String payoffs in string representation
			 *@param pm:Array - source array 
			 *@author Martin  
			 */	
			private function convertToMatrix(inputString:String):Array {

				var pm:Array=new Array(); 

				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var rows:Array = inputString.split("\n");
				var line:String = rows.shift() as String;
				maxColumns=0;
				while ( line != null ) {
					var columns:Array = line.split(delimeter);
					var column:String = columns.shift() as String;
					var matrixRow:Array=new Array();
					while (column != null) {
						if (trim(column) !="") {
							matrixRow.push(column);
						}
						column = columns.shift() as String;
					}
					if (matrixRow.length>maxColumns) {
						maxColumns=matrixRow.length;
					}
					if (matrixRow.length>0) {
						pm.push(matrixRow);
					}
					line = rows.shift() as String;
				}
				return pm;
			}
			
			
			/**
			 * Fills empty columns and rows with zeros. If (sym==true) this function creates a symmetric matrix and
			 * and fills empty elements with zeros.
			 *@param pm:Array - source array 
			 *@param sym:Boolean - if true than add columns or rows until pm is a symmetric array.
			 *@author Martin  
			 */	
			private function fillWithZeros(pm:Array,sym:Boolean):void{
				var i:int=0;
				var l:int=0;
				var k:int=0;
				for (i=0;i<pm.length;i++){
					l=pm[i].length;
					if (l<maxColumns) {
						for (k=0;k<maxColumns-l;k++) {
							pm[i].push("0");
						}
					}
				}
			
				//if game is symmetric rows and columns must have the same dimensions
				//Fill with zeros if not
				if (sym) {
					if (pm.length<maxColumns) {
						while (pm.length<maxColumns) {
							pm.push(new Array())
							for (k=0;k<maxColumns;k++) {
								pm[pm.length-1].push("0");
							}
						}
						
					} 
					
					if (pm.length>maxColumns){
						for (i=0;i<pm.length;i++){
							l=pm[i].length;
							if (l<pm.length) {
								for (var m:int=0;m<pm.length-l;m++) {
									pm[i].push("0");
								}
							}
						}
					}
					maxColumns=pm.length;
				}
				

			}
			/**
			 * Makes payoffMatrix2 the negative of payoffMatrix1 
			 *@author Rahul  
			 */	
			private function makeNegative():void {

				payoffMatrix2 = createEmptyMatrix();
				
				for (var i:int=0;i<payoffMatrix1.length;i++){
					for (var j:int=0;j<payoffMatrix1[i].length;j++){
						var r:Rational=Rational.parse(payoffMatrix1[i][j]);
						if(payoffMatrix1[i][j] != null && r != Rational.NaN){
							r=r.multiply(new Rational(-1,1));
							payoffMatrix2[i][j] = r.toString();	
						}
					}
				}
			}
			
			protected function randomInt(max:Number):int
			{
				return int(Math.random() * max);
			}
			
			/**
			 * Return random payoff matrix 
			 *@author Rahul 
			 */	
			private function createRandomMatrix():Array {

				var pm:Array = createEmptyMatrix()

				for (var i:int=0;i<pl1NumStr;i++){
					for (var j:int=0;j<pl2NumStr;j++){
							pm[i][j]=new Rational(randomInt(glbSettings.getValue("SYSTEM_MAX_PAYOFF") as Number), 1);
					}
				}
				return pm;
			}
			
			
			/**
			 * Generate random payoffs for player 1 and player 2 and aligns them
			 *@author Martin  
			 */	
			public function generateRandomPayoffs():void
			{
				payoffMatrix1 = createRandomMatrix(); // generate random matrix for player I
				pl1PayMapStr  = buildMatrixString(payoffMatrix1)

				if (general_mode) { // also generate random matrix for player II
					payoffMatrix2 = createRandomMatrix();
					pl2PayMapStr  = buildMatrixString(payoffMatrix2)
				}
				// zerosum_mode and symmetrix_mode dealt with by alignStrategy()
				alignStrategy()
			}

			/**
			 * Creates payoffMatrix2 as transpose of payoffMatrix1
			 *@author Rahul  
			 */	
			private function makeSymmetric():void {

				pl1NumStr = Math.max(pl1NumStr,pl2NumStr);
				pl2NumStr = pl1NumStr;

				payoffMatrix1 = convertToMatrixFixed(pl1PayMapStr);
				
				makeTranspose();
			}
			
			
			/**
			 * Creates payoffMatrix2 as transpose of payoffMatrix1
			 *@author Rahul  
			 */	
			private function makeTranspose():void {

				payoffMatrix2 = createEmptyMatrix();
				
				for (var i:int=0;i<payoffMatrix1.length;i++){
					for (var j:int=0;j<payoffMatrix1[i].length;j++){
							payoffMatrix2[j][i] = payoffMatrix1[i][j];
						}
					}
			}
			
			/**
			 * Create a String from the array of payoffs
			 *@param pm:Array - 2-dim Array of payoffs
			 *@return String - an return seperated string with all payoffs.
			 *@author Martin  
			 */	
			private function buildMatrixString(pm:Array):String 
			{
				
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var maxLength:Array = new Array();
				var i:int=0;
				var j:int=0;
				
				var use_dp:Boolean=glbSettings.getValue("SYSTEM_DECIMAL_LAYOUT") as Boolean;
				var dp:int=glbSettings.getValue("SYSTEM_DECIMAL_PLACES") as int;
				
				if (pm==null) 
					return Rational.NaN as String;
				if (pm[0]==null) 
					return Rational.NaN as String;
				
				for (j=0;j<pm[0].length;j++){
					var maxLen:int = 0;
					for (i=0;i<pm.length;i++){
						if (pm[i][j]!=null) {
							var test:String;
							if (use_dp) { 
								test= String(roundTodecimal(Rational.parse(pm[i][j]).floatValue,dp));
							} else {
								test=Rational.parse(pm[i][j]).toString();
								
							}
							
							if (test.length>maxLen) {
									maxLen=test.length;
								
							}
							log.add(Log.DEBUG,pm[i][j]);
						}
					}
					maxLength.push(maxLen) as int;
				}
				
			
									
				
				var matrixString:String= "";
				for (i=0;i<pm.length;i++){
					for (j=0;j<pm[i].length;j++){
						
						test=null;
						if (use_dp) { 
							test=String(roundTodecimal(Rational.parse(pm[i][j]).floatValue,dp));
						} else {
							test=Rational.parse(pm[i][j]).toString();
						}
						matrixString += StringUtil.repeat(" ", maxLength[j] - test.length ) + test;
						
						if (j<pm[i].length-1){
							matrixString +=delimeter;
						}
						
					}
					if (i<pm.length - 1) {
						matrixString += "\n";
					}
				}
				return matrixString;
			
			}
			
			private function roundTodecimal(n:Number, p:int = 0):Number
			{
				var dp:Number = Math.pow(10, p);
				return Math.round(dp * n) / dp;
			}

			/**
			 * Align the matrix in columns and rows for player 1 and player 2 and update the strategy names
			 *  
			 *@author Martin, updated by Rahul  
			 */	
			public function alignStrategy():void 
			{
				payoffMatrix1 = convertToMatrixFixed(pl1PayMapStr);

				if (zerosum_mode) {
					makeNegative();
				} else if (symmetric_mode) {
					makeSymmetric();
				} else if (general_mode) {
					payoffMatrix2 = convertToMatrixFixed(pl2PayMapStr);
				}
				pl1PayMapStr=buildMatrixString(payoffMatrix1)
				pl2PayMapStr=buildMatrixString(payoffMatrix2)

				updateAlphabets()
			}
			
			private function updateNumberOfStrategies(dim1:String,dim2:String):void {
				
				var xdim:int=-1;
				var ydim:int=-1;
				var pm:Array=new Array();
								
				
				if ((!isNaN( Number( StringUtil.trim(dim1) ) )) && 
					(!isNaN( Number( StringUtil.trim(dim2) ) )) ) {
					
					xdim=int(StringUtil.trim(dim1));
					if (symmetric_mode) {
						ydim=xdim;
					} else {	
						ydim=int(StringUtil.trim(dim2));	
					}
					
					if ((xdim<1) || (ydim<1)) {
						return
					}
					
				} else {
					return
				}
				if ((xdim!=-1) && (ydim!=-1)) {
					pl1NumStr = xdim;
					pl2NumStr = ydim;
					pl1PayMapStr=buildMatrixString(convertToMatrixFixed(pl1PayMapStr));
					pl2PayMapStr=buildMatrixString(convertToMatrixFixed(pl2PayMapStr));
				}	
				alignStrategy();
			}
		
			/**
			 * Sets the current status of the editor depending on the radiobutton. Sets the member variable <instyle> and enables or disables the matrix of player 2
			 *@param arg:String (ZG=ZeroSum Game,SG=Symetric Game, 2G=General Game)  
			 *@author Martin  
			 */	
			public function changeEvtRadioButton(arg : String):void {
				if (arg=="ZG") {
					zerosum_mode=true;
					general_mode=false
					symmetric_mode=false;
					setEditableMode();
				} else if (arg=="SG") {
					zerosum_mode=false;
					general_mode=false
					symmetric_mode=true;
					setEditableMode();					
				} else if (arg=="2G") {
					zerosum_mode=false;
					general_mode=true
					symmetric_mode=false;
					setEditableMode();
				}
				alignStrategy();
			}
			
			/**
			 * Controls wther number_of_strategies, strategy_names and payoff_matrix is editable
			 * and sets the background color accordingly.
			 *  
			 *@author Martin  
			 */	
			private function setEditableMode():void {
				
				if (zerosum_mode){

					p2_numb_editable=true;
					p2_strat_editable=true;
					p2_payoffs_editable=false;
					
					p2_num_cbg=0xffffff;	
					p2_strat_cbg=0xffffff;
					p2_text_cbg=0xcccccc;
					
					p1_numb_editable=true;
					p1_strat_editable=true;
					p1_payoffs_editable=true;
					
					p1cbg=0xffffff;
					
				} else if (symmetric_mode) {

					p2_numb_editable=false;
					p2_strat_editable=true;
					p2_payoffs_editable=false;
					
					p2_num_cbg=0xcccccc;	
					p2_strat_cbg=0xffffff;
					p2_text_cbg=0xcccccc;
					
					p1_numb_editable=true;
					p1_strat_editable=true;
					p1_payoffs_editable=true;
					
					p1cbg=0xffffff;

				} else if (general_mode){
					
					p2_numb_editable=true;
					p2_strat_editable=true;
					p2_payoffs_editable=true;
					
					p2_num_cbg=0xffffff;	
					p2_strat_cbg=0xffffff;
					p2_text_cbg=0xffffff;
					
					p1_numb_editable=true;
					p1_strat_editable=true;
					p1_payoffs_editable=true;
					
					p1cbg=0xffffff;
				}
				
			}
			
			
			/**
			 * Event catches the return event to align the matrix of player 1 after a new row is inserted 
			 *@author Martin  
			 */	
			/**private function keyPressedP1Payoff(event:KeyboardEvent):void{
				
				if ((!symmetric_mode) && (event.keyCode==13)){
					//It does not make sense to autoalign in a symmetric game during typing
					alignStrategy();
					pl1PayMapStrBox.text=pl1PayMapStrBox.text+"\n";
					pl1PayMapStrBox.selectRange(pl1PayMapStrBox.text.length,pl1PayMapStrBox.text.length);
				}
			}**/
			
			/**
			 * Event catches the return event to align the matrix of player 2 after a new row is inserted 
			 *@author Martin  
			 */	
			/**
			private function keyPressedP2Payoff(event:KeyboardEvent):void{
				
				if ((!symmetric_mode) && (event.keyCode==13)){
					//It does not make sense to autoalign in a symmetric game during typing
					alignStrategy();
					pl2PayMapStrBox.text=pl2PayMapStrBox.text+"\n";
					pl2PayMapStrBox.selectRange(pl2PayMapStrBox.text.length,pl2PayMapStrBox.text.length);
				}
			}**/
			
		]]>
	</fx:Script>

	<fx:Style>
		@font-face {
			src:url("../../../../../../assets/fonts/COURBD.TTF");
			fontFamily: myFontFamily;
			advancedAntiAliasing: true;
		}
	</fx:Style>
	

	<s:VGroup width="819" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" >
		
		<s:HGroup width="100%" gap="0" >
			<s:VGroup width="50%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" >
				<s:Label height="20" color="#2323E6"
                        text="Player 1" fontSize="16"
						verticalAlign="middle"/>
				
				<s:HGroup  width="100%" verticalAlign="middle">
					<s:Label height="20" width="155"
                        text="Number of strategies: "
                        fontSize="14" verticalAlign="middle"/>
					<s:TextInput tabIndex="1"
                        editable="{p1_numb_editable}"
                        id="pl1Dimensions" width="60"
                        widthInChars="22"
                        text="{pl1NumStr.toString()}" fontSize="16"
                        enter="updateNumberOfStrategies(pl1Dimensions.text,pl2Dimensions.text);
                          if (symmetric_mode) {pl1StratInput.setFocus();} else {pl2Dimensions.setFocus();}"
                        change="dataChanged=true;" contentBackgroundColor="{p1cbg}" />
					<s:Label height="20" width="100%"
                        text="(rows)" fontSize="14"
                        verticalAlign="middle"/>
				</s:HGroup>	
				
				<s:HGroup  width="100%" verticalAlign="middle">
					<s:Label height="20" width="155"
                        text="Strategy names: " fontSize="14"
                        verticalAlign="middle"/>
					<s:TextInput tabIndex="3" editable="{p1_strat_editable}" id="pl1StratInput"
                        width="100%" widthInChars="22"
                        text="{alpha1}" fontSize="16" change="dataChanged=true;"
                        enter="updateNumberOfStrategies(pl1Dimensions.text,pl2Dimensions.text);
                            pl2StratInput.setFocus();" 
                        contentBackgroundColor="{p1cbg}" />
				</s:HGroup>

				<s:Label height="20" color="#2323E6" text="Payoffs"
                      fontSize="16" verticalAlign="middle"/>
				<s:TextArea tabIndex="5" editable="{p1_payoffs_editable}" id="pl1PayMapStrBox"
                    width="100%" widthInChars="30" fontFamily="myFontFamily"
                    heightInLines="10" lineBreak="explicit"
                    text="{pl1PayMapStr}" fontSize="20"
                    change="pl1PayMapStr = pl1PayMapStrBox.text;dataChanged=true;"
                    contentBackgroundColor="{p1cbg}"/>

			</s:VGroup>
			<s:VGroup width="50%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			
				<s:Label height="20" color="#2323E6" text="Player 2"
                    fontSize="16" verticalAlign="middle"/>
				<s:HGroup  width="100%" verticalAlign="middle">
					<s:Label height="20" width="155"
                        text="Number of strategies: "
                        fontSize="14" verticalAlign="middle"/>
					<s:TextInput tabIndex="2" editable="{p2_numb_editable}"
                        id="pl2Dimensions" width="60" widthInChars="22"
                        text="{pl2NumStr.toString()}"
                        fontSize="16"
                        enter="updateNumberOfStrategies(pl1Dimensions.text,pl2Dimensions.text);
                               pl1StratInput.setFocus();"
                        change="dataChanged=true;" contentBackgroundColor="{p2_num_cbg}" />
					<s:Label height="20" width="100%"
                        text="(columns)" fontSize="14" verticalAlign="middle"/>
				
				</s:HGroup>	
				
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label height="20" width="155"
                        text="Strategy names:" fontSize="14" 
                        verticalAlign="middle"/>
					<s:TextInput tabIndex="4" editable="{p2_strat_editable}"
                        width="100%" id="pl2StratInput"
                        widthInChars="22" text="{alpha2}"
                        fontSize="16" change="dataChanged=true;" 
                        enter="updateNumberOfStrategies(pl1Dimensions.text,pl2Dimensions.text);
                            pl1PayMapStrBox.setFocus();" 
                        contentBackgroundColor="{p2_strat_cbg}" />
				</s:HGroup>

				<s:Label height="20" color="#2323E6"
                text="Payoffs" fontSize="16" verticalAlign="middle"/>
				<s:TextArea tabIndex="6" editable="{p2_payoffs_editable}" id="pl2PayMapStrBox"
                    width="100%" widthInChars="30" fontFamily="myFontFamily" heightInLines="10" lineBreak="explicit" 
                    text="{pl2PayMapStr}"
                    fontSize="20"
                    change="pl2PayMapStr = pl2PayMapStrBox.text;dataChanged=true;"
                    contentBackgroundColor="{p2_text_cbg}" /> 
			</s:VGroup>
		</s:HGroup>
			<s:VGroup width="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:HGroup width="100%" horizontalAlign="center">
                <s:Button tabIndex="7" enabled="{p1_payoffs_editable}"
                    label="Confirm changes and align payoffs" cornerRadius="0"
                    click="updateNumberOfStrategies(pl1Dimensions.text,pl2Dimensions.text);"
                    />
				</s:HGroup>
			</s:VGroup>
				
	</s:VGroup>
	
</s:VGroup>
